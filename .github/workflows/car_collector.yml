# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Car Collector CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
      - 'car-collector/**'
  pull_request:
    branches: [ master ]

defaults:
  run:
    working-directory: car-collector

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
      
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install deps
      run: npm ci
      
    - name: Run build
      run: npm run build
      
    - name: Run lint
      run: npm run lint
      
    - name: Run unit tests
      run: npm test

  deploy:
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: Prod
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Install Serverless Framework
        run: npm install -g serverless
      - name: Serverless AWS authentication
        run: sls config credentials --provider aws --key ${{ secrets.AWS_KEY }} --secret ${{ secrets.AWS_SECRET }}
      - name: Create env file
        run: |
          touch .env
          echo NETTIAUTO_API_SECRET=${{ secrets.NETTIAUTO_API_SECRET }} >> .env
          echo NETTIAUTO_API_USER=${{ secrets.NETTIAUTO_API_USER }} >> .env
          echo AWS_S3_ACCESS_SECRET=${{ secrets.AWS_S3_ACCESS_SECRET }} >> .env
          echo AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }} >> .env
          echo SENTRY_DNS=${{ secrets.SENTRY_DNS }} >> .env
          echo SENTRY_ENV=prod >> .env
          cat .env
      - name: Install NPM dependencies
        run: npm install
      - name: Deploy Lambda functions
        run: sls deploy --stage prod